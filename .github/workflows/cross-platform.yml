name: Cross-Platform Build and Test

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sunday at 3 AM UTC
    - cron: '0 3 * * 0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-matrix:
    name: Build Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            features: "simulator,software-fallback"
          - os: ubuntu-latest  
            target: aarch64-unknown-linux-gnu
            features: "simulator,software-fallback"
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            features: "simulator,software-fallback"
            
          # macOS builds
          - os: macOS-latest
            target: x86_64-apple-darwin
            features: "apple,simulator,software-fallback"
          - os: macOS-latest
            target: aarch64-apple-darwin
            features: "apple,simulator,software-fallback"
            
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            features: "simulator,software-fallback"
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            features: "simulator,software-fallback"
            
          # Android builds (cross-compilation)
          - os: ubuntu-latest
            target: aarch64-linux-android
            features: "samsung,qualcomm,simulator,software-fallback"
          - os: ubuntu-latest
            target: armv7-linux-androideabi
            features: "samsung,qualcomm,simulator,software-fallback"
            
          # iOS builds (cross-compilation)
          - os: macOS-latest
            target: aarch64-apple-ios
            features: "apple,simulator,software-fallback"
          - os: macOS-latest
            target: x86_64-apple-ios
            features: "apple,simulator,software-fallback"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ${{ matrix.os }}-${{ matrix.target }}

    - name: Install cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest' && contains(matrix.target, 'aarch64')
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Install Android NDK
      if: contains(matrix.target, 'android')
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c

    - name: Setup Android environment
      if: contains(matrix.target, 'android')
      run: |
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV
        echo "CC_aarch64_linux_android=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang" >> $GITHUB_ENV
        echo "CC_armv7_linux_androideabi=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi33-clang" >> $GITHUB_ENV

    - name: Install cross
      if: matrix.target != 'x86_64-unknown-linux-gnu' && matrix.target != 'x86_64-apple-darwin' && matrix.target != 'x86_64-pc-windows-msvc'
      run: cargo install cross

    - name: Build (native)
      if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-apple-darwin' || matrix.target == 'x86_64-pc-windows-msvc'
      run: cargo build --target ${{ matrix.target }} --features "${{ matrix.features }}"

    - name: Build (cross)
      if: matrix.target != 'x86_64-unknown-linux-gnu' && matrix.target != 'x86_64-apple-darwin' && matrix.target != 'x86_64-pc-windows-msvc'
      run: cross build --target ${{ matrix.target }} --features "${{ matrix.features }}"

    - name: Test (native only)
      if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-apple-darwin' || matrix.target == 'x86_64-pc-windows-msvc'
      run: cargo test --target ${{ matrix.target }} --features "${{ matrix.features }}"

  mobile-simulation:
    name: Mobile TEE Simulation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Test Samsung Knox simulation
      run: cargo test --package crypto-tee-vendor --features "samsung,simulator" samsung_

    - name: Test Apple Secure Enclave simulation
      run: cargo test --package crypto-tee-vendor --features "apple,simulator" apple_

    - name: Test Qualcomm QSEE simulation
      run: cargo test --package crypto-tee-vendor --features "qualcomm,simulator" qualcomm_

  wasm-build:
    name: WebAssembly Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Build for WebAssembly
      run: |
        # Build core without platform-specific features
        cargo build --target wasm32-unknown-unknown --package crypto-tee-vendor --features "software-fallback" --no-default-features
        cargo build --target wasm32-unknown-unknown --package crypto-tee --features "software-fallback" --no-default-features

  no-std-build:
    name: No-Std Compatibility
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: thumbv7em-none-eabihf

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Test no-std build
      run: |
        # Test that core components can build without std
        cargo build --target thumbv7em-none-eabihf --package crypto-tee-vendor --no-default-features
        
  feature-matrix:
    name: Feature Combinations
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          - "default"
          - "software-fallback"
          - "simulator"
          - "simulator,software-fallback"
          - "samsung"
          - "apple" 
          - "qualcomm"
          - "samsung,qualcomm"
          - "apple,samsung,qualcomm"
          - "all-features"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build with features
      run: |
        if [ "${{ matrix.features }}" = "all-features" ]; then
          cargo build --all-features
        elif [ "${{ matrix.features }}" = "default" ]; then
          cargo build
        else
          cargo build --features "${{ matrix.features }}"
        fi

    - name: Test with features
      run: |
        if [ "${{ matrix.features }}" = "all-features" ]; then
          cargo test --all-features
        elif [ "${{ matrix.features }}" = "default" ]; then
          cargo test
        else
          cargo test --features "${{ matrix.features }}"
        fi

  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run performance baseline
      run: |
        cargo bench --bench performance_tests > performance-baseline.txt
        echo "## Performance Baseline" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        tail -n 50 performance-baseline.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Upload performance baseline
      uses: actions/upload-artifact@v3
      with:
        name: performance-baseline
        path: performance-baseline.txt