name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run cargo audit
      run: cargo audit --json > audit-report.json

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-report
        path: audit-report.json

  semgrep:
    name: Static Analysis (Semgrep)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/rust
          p/secrets
          p/insecure-transport
          p/crypto

    - name: Upload Semgrep results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: semgrep-results
        path: semgrep.json

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    # Only run on pull requests for public repositories
    if: github.event_name == 'pull_request' && github.event.repository.private == false
    continue-on-error: true
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]  # Rust is analyzed as C++

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build for CodeQL
      run: cargo build --features "simulator,simulator-samsung,simulator-apple,simulator-qualcomm"

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Truffhog
      uses: trufflesecurity/trufflehog@v3.63.2
      with:
        path: ./
        base: ${{ github.event.pull_request.base.sha || 'main' }}
        head: ${{ github.event.pull_request.head.sha || 'HEAD' }}
        extra_args: --debug --only-verified

  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Check licenses
      run: cargo deny check licenses

    - name: Generate license report
      run: |
        cargo tree --format "{p} {l}" > license-report.txt
        echo "## License Report" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat license-report.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  malware-scan:
    name: Malware Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run ClamAV scan
      run: |
        sudo apt-get update
        sudo apt-get install -y clamav clamav-daemon
        sudo freshclam || echo "Freshclam update failed, continuing with existing database"
        clamscan -r --exclude-dir=target --exclude-dir=.git .

  sbom-generation:
    name: Software Bill of Materials
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-sbom
      run: cargo install cargo-sbom

    - name: Generate SBOM
      run: cargo sbom > crypto-tee-sbom.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: software-bill-of-materials
        path: crypto-tee-sbom.json

    - name: Attach SBOM to release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./crypto-tee-sbom.json
        asset_name: crypto-tee-sbom.json
        asset_content_type: application/json