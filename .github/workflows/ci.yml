name: ci build

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable, beta]
        exclude:
          # Skip beta on Windows and macOS to reduce CI time
          - os: windows-latest
            rust: beta
          - os: macOS-latest
            rust: beta

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ${{ matrix.os }}-${{ matrix.rust }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Set platform features
      id: features
      shell: bash
      run: |
        # Base features that work on all platforms
        BASE_FEATURES="simulator,simulator-samsung,simulator-apple,simulator-qualcomm"
        
        # Add platform-specific features
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          echo "features=${BASE_FEATURES},apple" >> $GITHUB_OUTPUT
        else
          echo "features=${BASE_FEATURES}" >> $GITHUB_OUTPUT
        fi

    - name: Run Clippy
      run: cargo clippy --all-targets --features "${{ steps.features.outputs.features }}" -- -D warnings

    - name: Build
      run: cargo build --verbose --features "${{ steps.features.outputs.features }}"

    - name: Run tests
      run: cargo test --verbose --features "${{ steps.features.outputs.features }}"

    - name: Run doc tests
      run: cargo test --doc --features "${{ steps.features.outputs.features }}"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Run cargo-deny
      run: cargo deny check

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run benchmarks
      run: cargo bench --features "simulator,simulator-samsung,simulator-apple,simulator-qualcomm" -- --output-format bencher | tee output.txt

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        name: Rust Benchmark
        tool: 'cargo'
        output-file-path: output.txt
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate code coverage
      run: cargo tarpaulin --verbose --features "simulator,simulator-samsung,simulator-apple,simulator-qualcomm" --workspace --timeout 120 --out xml

    - name: Display coverage summary
      run: |
        echo "Code coverage report generated:"
        if [ -f cobertura.xml ]; then
          echo "Coverage report saved to cobertura.xml"
          # Simple coverage summary from XML (optional)
          grep -o 'line-rate="[^"]*"' cobertura.xml | head -1 || echo "Coverage data available in cobertura.xml"
        fi

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust 1.70 (MSRV)
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: "1.70"

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check MSRV
      run: cargo check --features "simulator,simulator-samsung,simulator-apple,simulator-qualcomm"

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build documentation
      run: cargo doc --features "simulator,simulator-samsung,simulator-apple,simulator-qualcomm" --no-deps

    - name: Deploy docs to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run integration tests
      run: |
        cargo test --test integration_tests --features "simulator,simulator-samsung,simulator-apple,simulator-qualcomm"

    - name: Test RFC 9421 compliance
      run: cargo test --package crypto-tee-rfc9421

    - name: Test vendor implementations
      run: |
        cargo test --package crypto-tee-vendor --features "simulator,simulator-samsung,simulator-apple,simulator-qualcomm"
        cargo test --package crypto-tee-platform

  release:
    name: Release Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Verify release build
      run: |
        cargo build --release --features "simulator,simulator-samsung,simulator-apple,simulator-qualcomm"
        cargo test --release --features "simulator,simulator-samsung,simulator-apple,simulator-qualcomm"

    - name: Package crates
      run: |
        cargo package --package crypto-tee-vendor
        cargo package --package crypto-tee-platform  
        cargo package --package crypto-tee
        cargo package --package crypto-tee-rfc9421

    - name: Dry run publish
      run: |
        cargo publish --package crypto-tee-vendor --dry-run
        cargo publish --package crypto-tee-platform --dry-run
        cargo publish --package crypto-tee --dry-run
        cargo publish --package crypto-tee-rfc9421 --dry-run